name: PR Labeler

on:
  pull_request:
    types: [opened, edited, synchronize]
  pull_request_target:
    types: [opened, edited, synchronize]

jobs:
  label-pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Label PR based on template
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            
            async function main() {
              const pr = context.payload.pull_request;
              const body = pr.body || '';
              const title = pr.title || '';
              const files = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              const labels = new Set(pr.labels.map(l => l.name));
              
              // Template-based labels
              if (body.includes('Bug Description')) {
                labels.add('bug');
              }
              if (body.includes('Feature Description')) {
                labels.add('enhancement');
              }
              if (body.includes('Documentation Type')) {
                labels.add('documentation');
              }
              if (body.includes('Security Issue Type')) {
                labels.add('security');
              }
              if (body.includes('Refactoring Scope')) {
                labels.add('refactor');
              }
              if (body.includes('Configuration Type')) {
                labels.add('configuration');
              }
              
              // Size-based labels
              const changedLines = files.data.reduce((acc, file) => 
                acc + file.additions + file.deletions, 0
              );
              if (changedLines < 10) labels.add('size/XS');
              else if (changedLines < 50) labels.add('size/S');
              else if (changedLines < 200) labels.add('size/M');
              else if (changedLines < 500) labels.add('size/L');
              else labels.add('size/XL');
              
              // Content-based labels
              if (files.data.some(f => f.filename.endsWith('.test.ts') || f.filename.endsWith('.test.js'))) {
                labels.add('tests');
              }
              if (files.data.some(f => f.filename.endsWith('.md'))) {
                labels.add('documentation');
              }
              if (files.data.some(f => f.filename.match(/\.(tsx?|jsx?)$/))) {
                labels.add('code');
              }
              if (files.data.some(f => f.filename.includes('config'))) {
                labels.add('configuration');
              }
              
              // Priority labels based on title
              if (title.toLowerCase().includes('urgent') || title.toLowerCase().includes('critical')) {
                labels.add('priority/high');
              }
              
              // Status labels
              if (body.match(/- \[ \]/g)?.length > 0) {
                labels.add('status/incomplete');
              }
              if (body.toLowerCase().includes('wip') || title.toLowerCase().includes('wip')) {
                labels.add('status/wip');
              }
              if (body.toLowerCase().includes('breaking change')) {
                labels.add('breaking-change');
              }
              
              // Update PR labels
              await github.rest.issues.setLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: Array.from(labels)
              });
            }
            
            await main(); 