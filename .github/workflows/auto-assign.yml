name: Auto Assign Reviewers

on:
  pull_request:
    types: [opened, ready_for_review, reopened]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Assign Reviewers
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            // Define reviewer teams/individuals based on expertise
            const reviewers = {
              security: ['security-team'],
              frontend: ['frontend-team'],
              backend: ['backend-team'],
              docs: ['docs-team'],
              config: ['devops-team'],
              test: ['qa-team']
            };
            
            const selectedReviewers = new Set();
            
            // Add reviewers based on template type
            if (body.includes('Bug Description')) {
              selectedReviewers.add(reviewers.backend[0]);
              selectedReviewers.add(reviewers.test[0]);
            }
            if (body.includes('Feature Description')) {
              selectedReviewers.add(reviewers.frontend[0]);
              selectedReviewers.add(reviewers.backend[0]);
            }
            if (body.includes('Documentation Type')) {
              selectedReviewers.add(reviewers.docs[0]);
            }
            if (body.includes('Security Issue Type')) {
              selectedReviewers.add(reviewers.security[0]);
            }
            if (body.includes('Configuration Type')) {
              selectedReviewers.add(reviewers.config[0]);
            }
            
            // Add reviewers based on file types
            files.data.forEach(file => {
              if (file.filename.match(/\.(tsx?|jsx?)$/)) {
                if (file.filename.includes('components/')) {
                  selectedReviewers.add(reviewers.frontend[0]);
                } else {
                  selectedReviewers.add(reviewers.backend[0]);
                }
              }
              if (file.filename.endsWith('.md')) {
                selectedReviewers.add(reviewers.docs[0]);
              }
              if (file.filename.includes('test')) {
                selectedReviewers.add(reviewers.test[0]);
              }
              if (file.filename.includes('config')) {
                selectedReviewers.add(reviewers.config[0]);
              }
            });
            
            // Add security team for sensitive changes
            if (body.toLowerCase().includes('security') || 
                files.data.some(f => 
                  f.patch?.toLowerCase().includes('password') || 
                  f.patch?.toLowerCase().includes('secret') ||
                  f.patch?.toLowerCase().includes('token')
                )) {
              selectedReviewers.add(reviewers.security[0]);
            }
            
            // Request reviews
            if (selectedReviewers.size > 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                team_reviewers: Array.from(selectedReviewers)
              });
              
              // Add comment explaining reviewer selection
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `Automatically assigned the following teams for review:\n${Array.from(selectedReviewers).map(r => `- ${r}`).join('\n')}`
              });
            }

      - name: Check Review Requirements
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            const requiredReviews = {
              'size/XL': 3,
              'size/L': 2,
              'security': 2,
              'breaking-change': 2
            };
            
            let required = 1; // Default required reviews
            
            // Increase required reviews based on labels
            pr.labels.forEach(label => {
              if (requiredReviews[label.name]) {
                required = Math.max(required, requiredReviews[label.name]);
              }
            });
            
            // Update branch protection if needed
            if (required > 1) {
              await github.rest.repos.updateBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: pr.base.ref,
                required_status_checks: null,
                enforce_admins: true,
                required_pull_request_reviews: {
                  required_approving_review_count: required
                },
                restrictions: null
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `This PR requires ${required} approving reviews before it can be merged.`
              });
            } 