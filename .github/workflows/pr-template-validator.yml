name: PR Template Validator

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install @actions/core @actions/github js-yaml

      - name: Validate PR Template
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const path = require('path');

            async function main() {
              const pr = context.payload.pull_request;
              const body = pr.body || '';
              
              // Get template type from PR labels
              const templateType = pr.labels.find(label => 
                ['bug', 'enhancement', 'documentation', 'security', 'refactor', 'configuration'].includes(label.name)
              )?.name || 'default';

              // Read template file
              const templatePath = `.github/PULL_REQUEST_TEMPLATE/${templateType}.md`;
              if (!fs.existsSync(templatePath)) {
                core.warning(`Template ${templatePath} not found, skipping validation`);
                return;
              }

              const template = fs.readFileSync(templatePath, 'utf8');
              
              // Extract required sections from template
              const requiredSections = template.match(/^##\s+(.+)$/gm)
                ?.map(section => section.replace(/^##\s+/, '').trim())
                || [];

              // Check if PR body contains all required sections
              const missingSections = requiredSections.filter(section => 
                !body.includes(`## ${section}`)
              );

              // Check for empty checkboxes
              const checkboxes = body.match(/- \[ \]/g) || [];
              
              if (missingSections.length > 0) {
                core.warning('Missing required sections in PR description:');
                missingSections.forEach(section => {
                  core.warning(`- ${section}`);
                });
              }

              if (checkboxes.length > 0) {
                core.warning(`${checkboxes.length} unchecked items in PR description`);
              }

              // Add labels based on content
              const labels = new Set(pr.labels.map(l => l.name));
              
              if (body.toLowerCase().includes('breaking change')) {
                labels.add('breaking-change');
              }
              if (body.toLowerCase().includes('security')) {
                labels.add('security-review-needed');
              }
              if (checkboxes.length > 0) {
                labels.add('incomplete');
              }

              // Update PR labels
              await github.rest.issues.setLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: Array.from(labels)
              });
            }

            await main(); 